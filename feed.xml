<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenMessaging</title>
    <description>OpenMessaging is cloud-oriented and vendor-neutral, provides industry guidelines for areas of finance, e-commerce, IoT and big-data, and aimed to develop messaging and streaming applications across heterogeneous systems and platforms.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 22 Oct 2017 14:34:51 +0000</pubDate>
    <lastBuildDate>Sun, 22 Oct 2017 14:34:51 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>OpenMessaging: Building an Open Standard for Distributed Messaging</title>
        <description>&lt;p&gt;Through a collaborative effort from enterprises and communities invested in cloud, big data, and standard APIs, I’m excited to welcome the OpenMessaging project to The Linux Foundation. The OpenMessaging community’s goal is to create a globally adopted, vendor-neutral, and open standard for distributed messaging that can be deployed in cloud, on-premise, and hybrid use cases.&lt;/p&gt;

&lt;p&gt;Alibaba, Yahoo!, Didi, and Streamlio are the founding project contributors. The Linux Foundation has worked with the initial project community to establish a governance model and structure for the long-term benefit of the ecosystem working on a messaging API standard.&lt;/p&gt;

&lt;p&gt;As more companies and developers move toward cloud native applications, challenges are developing at scale with messaging and streaming applications. These include interoperability issues between platforms, lack of compatibility between wire-level protocols and a lack of standard benchmarking across systems.&lt;/p&gt;

&lt;p&gt;In particular, when data transfers across different messaging and streaming platforms, compatibility problems arise, meaning additional work and maintenance cost. Existing solutions lack standardized guidelines for load balance, fault tolerance, administration, security, and streaming features. Current systems don’t satisfy the needs of modern cloud-oriented messaging and streaming applications. This can lead to redundant work for developers and makes it difficult or impossible to meet cutting-edge business demands around IoT, edge computing, smart cities, and more.&lt;/p&gt;

&lt;p&gt;Contributors to OpenMessaging are looking to improve distributed messaging by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creating a global, cloud-oriented, vendor-neutral industry standard for distributed messaging&lt;/li&gt;
  &lt;li&gt;Facilitating a standard benchmark for testing applications&lt;/li&gt;
  &lt;li&gt;Enabling platform independence&lt;/li&gt;
  &lt;li&gt;Targeting cloud data streaming and messaging requirements with scalability, flexibility, isolation, and security built in&lt;/li&gt;
  &lt;li&gt;Fostering a growing community of contributing developers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more about the new project and how to participate here: http://openmessaging.cloud&lt;/p&gt;

&lt;p&gt;These are some of the organizations supporting OpenMessaging:&lt;/p&gt;

&lt;p&gt;“We have focused on the messaging and streaming field for years, during which we explored Corba notification, JMS and other standards to try to solve our stickiest business requirements. After evaluating the available alternatives, Alibaba chose to create a new cloud-oriented messaging standard, OpenMessaging, which is a vendor-neutral and language-independent and provides industrial guidelines for areas like finance, e-commerce, IoT, and big data. Moreover, it aims to develop messaging and streaming applications across heterogeneous systems and platforms. We hope it can be open, simple, scalable, and interoperable. In addition, we want to build an ecosystem according to this standard, such as benchmark, computation, and various connectors. We would like to have new contributions and hope everyone can work together to push the OpenMessaging standard forward.” &lt;strong&gt;— Von Gosling, senior architect at Alibaba, co-creator of Apache RocketMQ, and original initiator of OpenMessaging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“As the sophistication and scale of applications’ messaging needs continue to grow, lack of a standard interface has created complexity and inflexibility barriers for developers and organizations. Streamlio is excited to work with other leaders to launch the OpenMessaging standards initiative in order to give customers easy access to high-performance, low-latency messaging solutions like Apache Pulsar that offer the durability, consistency, and availability that organizations require.” &lt;strong&gt;— Matteo Merli, software engineer at Streamlio, co-creator of Apache Pulsar, and member of Apache BookKeeper PMC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Oath–a Verizon subsidiary of leading media and tech brands including Yahoo and AOL– supports open, collaborative initiatives and is glad to join the OpenMessaging project.” &lt;strong&gt;— Joe Francis, director, Core Platforms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“In Didi, we have defined a private set of producer API and consumer API to hide differences among open source MQs such as Apache Kafka, Apache RocketMQ, etc. as well as to provide additional customized features. We are planning to release these to the open source community. So far, we have accumulated a lot of experience on MQs and API unification, and are willing to work in OpenMessaging to construct a common standard of APIs together with others. We sincerely believe that a unified and widely accepted API standard can benefit MQ technology and applications that rely on it.” &lt;strong&gt;— Neil Qi, architect at Didi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“There are many different open source messaging solutions, including Apache ActiveMQ, Apache RocketMQ, Apache Pulsar, and Apache Kafka. The lack of an industry-wide, scalable messaging standard makes evaluating a suitable solution difficult. We are excited to support the joint effort from multiple open source projects working together to define a scalable, open messaging specification. Apache BookKeeper has been successfully deployed in production at Yahoo (via Apache Pulsar) and Twitter (via Apache DistributedLog) as their durable, high-performance, low-latency storage foundation for their enterprise-grade messaging systems. We are excited to join the OpenMessaging effort to help other projects address common problems like low-latency durability, consistency and availability in messaging solutions.” &lt;strong&gt;— Sijie Guo, co-founder of Streamlio, PMC chair of Apache BookKeeper, and co-creator of Apache DistributedLog&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;News Source: &lt;a href=&quot;https://www.linuxfoundation.org/blog/building-open-standard-distributed-messaging-introducing-openmessaging/&quot;&gt;Building an Open Standard for Distributed Messaging: Introducing OpenMessaging&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
        <link>/news/2017/10/10/openMessaging-launches-with-linux-foundation.html</link>
        <guid isPermaLink="true">/news/2017/10/10/openMessaging-launches-with-linux-foundation.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>OpenMessaging Domain Architecture V0.1</title>
        <description>&lt;p&gt;Above is the domain architecture of Open Messaging, see &lt;a href=&quot;/openmessaging-java&quot;&gt;JavaDoc&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;OpenMessaging has released first &lt;a href=&quot;https://search.maven.org/#search%7Cga%7C1%7Copenmessaging&quot;&gt;alpha version&lt;/a&gt; recently, Apache RocketMQ has provided a &lt;a href=&quot;https://github.com/apache/incubator-rocketmq/tree/openmessaging-impl/openmessaging&quot;&gt;partial implementation&lt;/a&gt; for OpenMessaging-0.1.0-alpha.&lt;/p&gt;

&lt;h2 id=&quot;namespace&quot;&gt;Namespace&lt;/h2&gt;

&lt;p&gt;Namespace likes a cgroup namespace, to create an isolated space with security guarantee. Each namespace has its own set of producer, consumer, topic, queue and so on. OpenMessaging uses MessagingAccessPoint to access/read/write the resources of a specified Namespace.&lt;/p&gt;

&lt;h2 id=&quot;producer&quot;&gt;Producer&lt;/h2&gt;

&lt;p&gt;OpenMessaging defines two kinds of Producer: Producer and SequenceProducer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Producer, provides various send methods to send a message to a specified destination, Topic or Queue. Three ways are supported: synchronous, asynchronous and oneway.&lt;/li&gt;
  &lt;li&gt;SequenceProducer, focuses on speed, the implementation can adopt the batch way, send many messages and then commit at once.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consumer&quot;&gt;Consumer&lt;/h2&gt;

&lt;p&gt;OpenMessaging defines two kinds of Consumer: PullConsumer, PushConsumer and StreamingConsumer. Each consumer only supports consume messages from the Queue.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PullConsumer, pulls messages from the specified queue, supports submit the consume result by acknowledgement at any time. One PullConsumer only can pull messages from one fixed queue.&lt;/li&gt;
  &lt;li&gt;PushConsumer, receives messages from multiple queues, these messages are pushed from the MOM server. PushConsumer can attach to multiple queues with separate MessageListener and submit consume result through ReceivedMessageContext at any time.&lt;/li&gt;
  &lt;li&gt;StreamingConsumer, a brand-new consumer type, a stream-oriented consumer, to integrate messaging system with Streaming/BigData related platforms easily. StreamingConsumer supports consume messages from partitions of a specified queue like a iterator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;topic-queue-and-routing&quot;&gt;Topic Queue and Routing&lt;/h2&gt;

&lt;p&gt;These three concepts are closely connected, although Topic and Queue have different responsibilities, they are confusing.
Topic&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Topic, the carrier of origin messages, is responsibility for holding messages. The distribution and sequential of messages in Topic is undefined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;The messages in Topic are original, waiting for processing, which always can’t arouse the interests of consumers. In a word, the messages in Topic is producer-oriented, not consumer–oriented.&lt;/p&gt;

&lt;p&gt;So the Routing is in charge of processing the original messages in Topic, and routing to Queue. Each Routing has a operator pipeline, consists of  a series of operators. The messages will flow through the operator pipeline from Topic and Queue.&lt;/p&gt;

&lt;p&gt;A  operator is used to handle the flowing messages in Routing. There are many kinds of  operator, expression operator, deduplicator operator, joiner operator, filter operator, rpc operator, and so on.&lt;/p&gt;

&lt;p&gt;What’s more? Routing can cross the network, message can be routed from a network partition to another partition.&lt;/p&gt;

&lt;h2 id=&quot;queue&quot;&gt;Queue&lt;/h2&gt;

&lt;p&gt;The messages have been routed to Queue, now can be consumed by consumers.
It is noteworthy that a Queue should be divided into partitions, a message will be routed to a specified partition by MessageHeader#SHARDING_KEY.&lt;/p&gt;

&lt;p&gt;Queue also accepts messages from Producer directly, sometimes, we want to the shortest path from Producer to Consumer, for performance.&lt;/p&gt;

&lt;h2 id=&quot;topic-vs-queue&quot;&gt;Topic vs. Queue&lt;/h2&gt;

&lt;p&gt;Both Topic and Queue are the carrier of messages.
Topic is producer-oriented, while Queue is consumer-oriented.
Messages in Topic are from Producer, while messages in Queue is from Topic or Producer.
Queue is divided into partitions, while the arch of Topic is undefined. 
Queue is a little sub set of a Topic in most cases.
Create or destroy a Queue is easy and producer irrelevant.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
        <link>/design/2017/09/12/openmessaging-domain-architecture-v0.1.html</link>
        <guid isPermaLink="true">/design/2017/09/12/openmessaging-domain-architecture-v0.1.html</guid>
        
        
        <category>design</category>
        
      </item>
    
  </channel>
</rss>
